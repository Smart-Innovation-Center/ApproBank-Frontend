{"remainingRequest":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/dev/oriHenoc/ApproBank-frontend/src/views/pages/profile.vue?vue&type=template&id=279a5bb4&","dependencies":[{"path":"/opt/dev/oriHenoc/ApproBank-frontend/src/views/pages/profile.vue","mtime":1612262588901},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtYXBwPgogICAgPGRpdiBjbGFzcz0id3JhcHBlciAiPgogICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyIiBkYXRhLWNvbG9yPSJvcmFuZ2UiIGRhdGEtYmFja2dyb3VuZC1jb2xvcj0iYmxhY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImxvZ28gdGV4dC1jZW50ZXIiPgogICAgICAgICAgPGEgaHJlZj0iLi4vIj48aDIgY2xhc3M9InRleHQtbGlnaHQgdGV4dC11cHBlcmNhc2UiPkFwcHJvYmFuazwvaDI+PC9hPgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtb3JhbmdlIHRleHQtdXBwZXJjYXNlIj57eyB1c2VySW5mb3Mucm9sZXNbMF0ubmFtZSB9fTwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLXdyYXBwZXIiPgogICAgICAgICAgPHVsIGNsYXNzPSJuYXYgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJkYXNoYm9hcmQiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5kYXNoYm9hcmQ8L2k+CiAgICAgICAgICAgICAgICA8cD5UYWJsZWF1IGRlIEJvcmQ8L3A+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGFjdGl2ZSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJwcm9maWxlIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGVyc29uPC9pPgogICAgICAgICAgICAgICAgPHA+UHJvZmlsPC9wPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3RydWN0dXJlT00nIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9Im1lc0FnZW5jZXMiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5zdG9yZV9tYWxsX2RpcmVjdG9yeTwvaT4KICAgICAgICAgICAgICAgIDxwPk1lcyBBZ2VuY2VzPC9wPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgZiAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjc291c21lbiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc291c21lbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFjY291bnRfYmFsYW5jZV93YWxsZXQ8L2k+CiAgICAgICAgICAgICAgICAgICAgICA8cD5BcHByb3Zpc2lvbm5lbWVudHM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmbGV4LWNvbHVtbiBwbC0yIG5hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3RydWN0dXJlT00nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InN1cHBseSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFkZF9jaXJjbGU8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Ob3V2ZWxsZSBEZW1hbmRlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J2FkbWluQmFucXVlJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JPTUNJJyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJkZW1hbmRlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNjaGVkdWxlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RGVtYW5kZXMgZW4gYXR0ZW50ZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0ibGlzdGVEZW1hbmRlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnJ1bGU8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MaXN0ZSBkZXMgZGVtYW5kZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSAiPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0ibm90aWZpY2F0aW9ucyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPm5vdGlmaWNhdGlvbnM8L2k+CiAgICAgICAgICAgICAgICA8cD5Ob3RpZmljYXRpb25zPC9wPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3VwZXJBZG1pbicgfHwgdXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICBocmVmPSIjc291c21lbnVBZG1pbiIKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc291c21lbnVBZG1pbiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnZpc2liaWxpdHk8L2k+CiAgICAgICAgICAgICAgICA8cD5BZG1pbmlzdHJhdGlvbjwvcD4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UiIGlkPSJzb3VzbWVudUFkbWluIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZsZXgtY29sdW1uIHBsLTIgbmF2Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Z3JvdXBzPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+R2VzdGlvbiBkZXMgVXRpbGlzYXRldXJzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICBocmVmPSIjc291c21lbnVTdHJ1Y3R1cmUiCiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3NvdXNtZW51U3RydWN0dXJlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+aG9tZTwvaT4KICAgICAgICAgICAgICAgIDxwPkdlc3Rpb24gZGVzIFN0cnVjdHVyZXM8L3A+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbnVTdHJ1Y3R1cmUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmxleC1jb2x1bW4gcGwtMiBuYXYiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5wYWxldHRlPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+TGlzdGUgZGVzIFN0cnVjdHVyZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5wYWxldHRlPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+TGlzdGUgZGVzIEFnZW5jZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFjY291bnRfYmFsYW5jZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkNvbXB0ZXMgQmFucXVlIE9yYW5nZTwvcD4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCB0ZXh0LXRydW5jYXRlIgogICAgICAgICAgICAgICAgaHJlZj0iI3NvdXNtZW51IgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzb3VzbWVudSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNldHRpbmdzPC9pPgogICAgICAgICAgICAgICAgPHA+UGFyYW3DqHRyZXM8L3A+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbnUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmxleC1jb2x1bW4gcGwtMiBuYXYiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmluZm9fb3V0bGluZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkFwcHJvYmFuazwvcD4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5wYWxldHRlPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+QWZmaWNoYWdlPC9wPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNhZmV0eV9kaXZpZGVyPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+R2VzdGlvbiBkZXMgUsO0bGVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmxvY2s8L2k+CiAgICAgICAgICAgICAgICAgICAgICA8cD5HZXN0aW9uIGRlcyBQZXJtaXNzaW9uczwvcD4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8aHIgY2xhc3M9ImJnLW9yYW5nZSIvPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5tZW51X2Jvb2s8L2k+CiAgICAgICAgICAgICAgICA8cD5Eb2N1bWVudGF0aW9uPC9wPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+c3VwcG9ydF9hZ2VudDwvaT4KICAgICAgICAgICAgICAgIDxwPlNlcnZpY2UgU3VwcG9ydDwvcD4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibWFpbi1wYW5lbCI+CiAgICAgICAgPCEtLSBOYXZiYXIgLS0+CiAgICAgICAgPG5hdgogICAgICAgICAgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci10cmFuc3BhcmVudCBuYXZiYXItYWJzb2x1dGUgZml4ZWQtdG9wICIKICAgICAgICA+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItd3JhcHBlciI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iamF2YXNjcmlwdDo7Ij5Qcm9maWwgVXRpbGlzYXRldXI8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgY2xhc3M9Im5hdmJhci10b2dnbGVyIgogICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0ibmF2aWdhdGlvbi1pbmRleCIKICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXItaWNvbiBpY29uLWJhciI+PC9zcGFuPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYXZiYXItdG9nZ2xlci1pY29uIGljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24gaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSBqdXN0aWZ5LWNvbnRlbnQtZW5kIj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iZGFzaGJvYXJkIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmRhc2hib2FyZDwvaT4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZC1sZy1ub25lIGQtbWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgVGFibGVhdSBkZSBib3JkCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgICAgICAgICAgICBpZD0ibmF2YmFyRHJvcGRvd25NZW51TGluayIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+bm90aWZpY2F0aW9uczwvaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibm90aWZpY2F0aW9uIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkLWxnLW5vbmUgZC1tZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25zCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IgogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd25NZW51TGluayIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSJub3RpZmljYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgIE5vdXZlbGxlIGRlbWFuZGUgZW4gYXR0ZW50ZSBkZSB2YWxpZGF0aW9uICEKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9Im5vdGlmaWNhdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgVm90cmUgZGVtYW5kZSBhIMOpdMOpIGFwcHJvdXbDqWUgKDEvMikgIQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICAgIGhyZWY9ImphdmFzY3JpcHQ6OyIKICAgICAgICAgICAgICAgICAgICBpZD0ibmF2YmFyRHJvcGRvd25Qcm9maWxlIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5wZXJzb248L2k+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImQtbGctbm9uZSBkLW1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgIE1vbiBDb21wdGUKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJuYXZiYXJEcm9wZG93blByb2ZpbGUiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWNlbnRlciBmb250LXdlaWdodC1ib2xkIHRleHQtb3JhbmdlIHRleHQtdXBwZXJjYXNlIj57eyB1c2VySW5mb3MubmFtZSB9fTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tZGl2aWRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9InByb2ZpbGUiPk1vbiBQcm9maWw8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIEBjbGljaz0ibG9nb3V0Ij5NZSBEw6ljb25uZWN0ZXI8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbmF2PgogICAgICAgIDwhLS0gRW5kIE5hdmJhciAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXByaW1hcnkgYmctb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPkVkaXRlciBQcm9maWw8L2g0PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLWNhdGVnb3J5Ij4KICAgICAgICAgICAgICAgICAgICAgIE1vZGlmaWV6IHZvcyBpbmZvcm1hdGlvbnMgZGUgY29tcHRlCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICA8di1mb3JtPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk5vbSBVdGlsaXNhdGV1cjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idXNlckluZm9zLm5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VySW5mb3MuZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5EYXRlIEluc2NyaXB0aW9uPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VySW5mb3MuY3JlYXRlZF9hdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+Tm9tIGRlIEZhbWlsbGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VySW5mb3MuZmlyc3RuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QcsOpbm9tKHMpPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idXNlckluZm9zLmxhc3RuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5OdW3DqXJvIGRlIFTDqWzDqXBob25lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idXNlckluZm9zLnBob25lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tb3JhbmdlIGJ0bi1maWxsIHB1bGwtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICBFbnJlZ2lzdHJlcgogICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXJmaXgiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdi1mb3JtPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1uYXYtdGFicyBiZy1ibGFjayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXdhcm5pbmcgYmctb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICBFZGl0ZXIgTW90IGRlIFBhc3NlCiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgIDx2LWZvcm0+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJvbGRQYXNzd29yZCI+TW90IGRlIFBhc3NlIEFjdHVlbDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJwYXNzd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ib2xkUGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5ld1Bhc3N3b3JkIj5Ob3V2ZWF1IE1vdCBkZSBQYXNzZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJwYXNzd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ibmV3UGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNvbmZpcm1OZXdQYXNzd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Db25maXJtZXIgTm91dmVhdSBNb3QgZGUgUGFzc2U8L2xhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImNvbmZpcm1OZXdQYXNzd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW9yYW5nZSBidG4tZmlsbCBwdWxsLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgVmFsaWRlcgogICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC92LWZvcm0+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiIHYtaWY9InVzZXJJbmZvcy5pZD09PTEiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBiZy1ibGFjayI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXByaW1hcnkgYmctb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUgIj5Db21wdGVzIEJhbnF1ZXM8L2g0PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLWNhdGVnb3J5Ij4KICAgICAgICAgICAgICAgICAgICAgIEljaSB2b3MgUmVsw6l2w6lzIGQnSWRlbnRpdMOpIEJhbnF1YWlyZSAow6AgcmVuc2VpZ25lciBhdmFudAogICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxiciAvPjxidXR0b24KICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXdoaXRlIHRleHQtZGFyayBidG4tcm91bmQiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2FkZFJJQk1vZGFsIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+YWRkPC9pPiBBam91dGVyCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiPgogICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcHBlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUklCCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYW5xdWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKHJpYiwgaW5kZXgpIGluIHJpYnMiIDprZXk9InJpYi5pZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGluZGV4ICsgMSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1vcmFuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyByaWIubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcmliLmJhbmsubm9tIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyByaWIuZGVzY3JpcHRpb24gfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRkLWFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD0idG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iTW9kaWZpZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tYmxhY2sgYnRuLWxpbmsgYnRuLXNtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYXRlcmlhbC1pY29ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdFJpYihyaWIuaWQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPmVkaXQ8L2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbD0idG9vbHRpcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iU3VwcHJpbWVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRhbmdlciBidG4tbGluayBidG4tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hdGVyaWFsLWljb25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVSaWIocmliLmlkKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5jbG9zZTwvaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3RydWN0dXJlT00nIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICA8di1kYXRhLXRhYmxlCiAgICA6aGVhZGVycz0iaGVhZGVycyIKICAgIDppdGVtcz0icmlicyIKICAgIGNsYXNzPSJlbGV2YXRpb24tNSIKICA+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dG9wPgogICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgIGZsYXQKICAgICAgICA+CiAgICAgICAgICA8di10b29sYmFyLXRpdGxlIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N0cnVjdHVyZU9NJyI+TWVzIFJlbMOpdsOpcyBkJ0lkZW50aXTDqSBCYW5xdWFpcmU8L3YtdG9vbGJhci10aXRsZT4KICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGUgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPlJlbMOpdsOpcyBkJ0lkZW50aXTDqSBCYW5xdWFpcmUgZCdPUkFOR0U8L3YtdG9vbGJhci10aXRsZT4KICAgICAgICAgIDx2LWRpdmlkZXIKICAgICAgICAgICAgY2xhc3M9Im14LTQiCiAgICAgICAgICAgIGluc2V0CiAgICAgICAgICAgIHZlcnRpY2FsCiAgICAgICAgICA+PC92LWRpdmlkZXI+CiAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgIDx2LWRpYWxvZwogICAgICAgICAgICB2LW1vZGVsPSJkaWFsb2ciCiAgICAgICAgICAgIG1heC13aWR0aD0iNTAwcHgiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY2xhc3M9Im1iLTIgYnRuLW9yYW5nZSIKICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBBam91dGVyCiAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhlYWRsaW5lIj57eyBmb3JtVGl0bGUgfX08L3NwYW4+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CgogICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgICAgICAgICBzbT0iMTIiCiAgICAgICAgICAgICAgICAgICAgICBtZD0iMTIiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlJJQiIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Im51bWVybyIKICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0ibWRpLW5vdGUiCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdGVkSXRlbS5udW1lcm8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sCiAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgIHNtPSIxMiIKICAgICAgICAgICAgICAgICAgICAgIG1kPSIxMiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVkaXRlZEl0ZW0uYmFua0lEIgogICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJiYW5rcyIKICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0iYWNjb3VudF9iYWxhbmNlIgogICAgICAgICAgICAgICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICAgICAgICAgICAgICBpdGVtLXRleHQ9Im5vbSIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJCQU5RVUUgKiIKICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZS1saW5lCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgc209IjEyIgogICAgICAgICAgICAgICAgICAgICAgbWQ9IjEyIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0icmVvcmRlciIKICAgICAgICAgICAgICAgICAgICAgIHJvd3M9IjUiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJlZGl0ZWRJdGVtLmRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sCiAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgIHNtPSIxMiIKICAgICAgICAgICAgICAgICAgICAgIG1kPSIxMiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJlZGl0ZWRJdGVtLm9yYW5nZSIgLz4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgoKICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1saW5rIGJ0bi1kZWZhdWx0IgogICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgIEBjbGljaz0iY2xvc2UiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIEFubnVsZXIKICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tb3JhbmdlIgogICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2F2ZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgRW5yZWdpc3RlcgogICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nRGVsZXRlIiBtYXgtd2lkdGg9IjUwMHB4Ij4KICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJoZWFkbGluZSI+w4p0ZXMtdm91cyBzw7tyIGRlIHZvdWxvaXIgc3VwcHJpbWVyIHZvdHJlIFJJQiA6IHt7ZWRpdGVkSXRlbS5udW1lcm99fSA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4tbGluayIgdGV4dCBAY2xpY2s9ImNsb3NlRGVsZXRlIj5Bbm51bGVyPC92LWJ0bj4KICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiB0ZXh0IEBjbGljaz0iZGVsZXRlSXRlbUNvbmZpcm0oZWRpdGVkSXRlbS5pZCkiPlN1cHByaW1lcjwvdi1idG4+CiAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6aXRlbS5hY3Rpb25zPSJ7IGl0ZW0gfSI+CiAgICAgICAgPHYtaWNvbgogICAgICAgICAgc21hbGwKICAgICAgICAgIGNsYXNzPSJtci0yIgogICAgICAgICAgQGNsaWNrPSJlZGl0SXRlbShpdGVtKSIKICAgICAgICA+CiAgICAgICAgICBtZGktcGVuY2lsCiAgICAgICAgPC92LWljb24+CiAgICAgICAgPHYtaWNvbgogICAgICAgICAgc21hbGwKICAgICAgICAgIEBjbGljaz0iZGVsZXRlSXRlbShpdGVtKSIKICAgICAgICA+CiAgICAgICAgICBtZGktZGVsZXRlCiAgICAgICAgPC92LWljb24+CiAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bm8tZGF0YT4KICAgICAgICAgIEF1Y3VuZSBkb25uw6llIMOgIGFmZmljaGVyCiAgICAgIDwvdGVtcGxhdGU+CiAgPC92LWRhdGEtdGFibGU+CjwvdGVtcGxhdGU+CgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImFkZFJJQk1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9IiI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sb2dpbiIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBjYXJkLXNpZ251cCBjYXJkLXBsYWluIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZC1oZWFkZXIgY2FyZC1oZWFkZXItcHJpbWFyeSBiZy1vcmFuZ2UgdGV4dC1jZW50ZXIgY29sLW1kLTEyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsZWFyPC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5Bam91dGVyIHVuIFJJQjwvaDQ+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICA8di1mb3JtIHJlZj0iYWRkUmliRm9ybSIgOnZhbHVlPSJmb3JtVmFsaWQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgIGxhYmVsPSJSSUIiCiAgICAgICAgICAgICAgICAgICAgbmFtZT0ibnVtZXJvIgogICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0ibWRpLW5vdGUiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdSaWIubnVtZXJvIgogICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CgogICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdSaWIuYmFua0lEIgogICAgICAgICAgICAgICAgICAgIDppdGVtcz0iYmFua3MiCiAgICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPSJhY2NvdW50X2JhbGFuY2UiCiAgICAgICAgICAgICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub20iCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkJBTlFVRSAqIgogICAgICAgICAgICAgICAgICAgIHNpbmdsZS1saW5lCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuLW9iamVjdAogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvdi1zZWxlY3Q+CgogICAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0icmVvcmRlciIKICAgICAgICAgICAgICAgICAgICByb3dzPSI1IgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJEZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJuZXdSaWIuZGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC92LWZvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4td2QgYnRuLWxnIgogICAgICAgICAgICAgICAgQGNsaWNrPSJhZGROZXdSaWIoKSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBBam91dGVyCiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iZWRpdFJJQk1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9IiI+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1sb2dpbiIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBjYXJkLXNpZ251cCBjYXJkLXBsYWluIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZC1oZWFkZXIgY2FyZC1oZWFkZXItcHJpbWFyeSBiZy1ibGFjayB0ZXh0LWNlbnRlciBjb2wtbWQtMTIiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2xlYXI8L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPk1vZGlmaWVyIFJJQjwvaDQ+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICA8di1mb3JtIHJlZj0iZWRpdFJpYkZvcm0iIDp2YWx1ZT0iZm9ybVZhbGlkIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iUklCIgogICAgICAgICAgICAgICAgICAgIG5hbWU9Im51bWVybyIKICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249Im1kaS1ub3RlIgogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmliLm51bWVybyIKICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgoKICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmliLmJhbmtJRCIKICAgICAgICAgICAgICAgICAgICA6aXRlbXM9ImJhbmtzIgogICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0iYWNjb3VudF9iYWxhbmNlIgogICAgICAgICAgICAgICAgICAgIGl0ZW0tdmFsdWU9ImlkIgogICAgICAgICAgICAgICAgICAgIGl0ZW0tdGV4dD0ibm9tIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJCQU5RVUUgKiIKICAgICAgICAgICAgICAgICAgICBzaW5nbGUtbGluZQogICAgICAgICAgICAgICAgICAgIHJldHVybi1vYmplY3QKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L3Ytc2VsZWN0PgoKICAgICAgICAgICAgICAgICAgPHRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249InJlb3JkZXIiCiAgICAgICAgICAgICAgICAgICAgcm93cz0iNSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icmliLmRlc2NyaXB0aW9uIgogICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvdi1mb3JtPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXdkIGJ0bi1sZyIKICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlUmliKCkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgTW9kaWZpZXIKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4gLS0+CiAgPC92LWFwcD4K"},null]}