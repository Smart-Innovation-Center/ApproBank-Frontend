{"remainingRequest":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/dev/oriHenoc/ApproBank-frontend/src/views/pages/supply.vue?vue&type=template&id=535c65b4&","dependencies":[{"path":"/opt/dev/oriHenoc/ApproBank-frontend/src/views/pages/supply.vue","mtime":1612274580969},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/dev/oriHenoc/ApproBank-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}