{"remainingRequest":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\src\\views\\pages\\demandes.vue?vue&type=template&id=3204a1fe&","dependencies":[{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\src\\views\\pages\\demandes.vue","mtime":1615291428554},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtYXBwPgogICAgPGRpdiBjbGFzcz0id3JhcHBlciAiPgogICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyIiBkYXRhLWNvbG9yPSJvcmFuZ2UiIGRhdGEtYmFja2dyb3VuZC1jb2xvcj0iYmxhY2siPgogICAgICAgIDxkaXYgY2xhc3M9ImxvZ28gdGV4dC1jZW50ZXIiPgogICAgICAgICAgPGEgaHJlZj0iLi4vIj48aDIgY2xhc3M9InRleHQtbGlnaHQgdGV4dC11cHBlcmNhc2UiPkFwcHJvYmFuazwvaDI+PC9hPgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtb3JhbmdlIHRleHQtdXBwZXJjYXNlIj57eyB1c2VySW5mb3Mucm9sZXNbMF0ubmFtZSB9fTwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLXdyYXBwZXIiPgogICAgICAgICAgPHVsIGNsYXNzPSJuYXYgdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0iZGFzaGJvYXJkIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZGFzaGJvYXJkPC9pPgogICAgICAgICAgICAgICAgPHA+VGFibGVhdSBkZSBCb3JkPC9wPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gIj4KICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSJwcm9maWxlIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGVyc29uPC9pPgogICAgICAgICAgICAgICAgPHA+UHJvZmlsPC9wPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N0cnVjdHVyZU9NJyI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0ibWVzQWdlbmNlcyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnN0b3JlX21hbGxfZGlyZWN0b3J5PC9pPgogICAgICAgICAgICAgICAgPHA+TWVzIEFnZW5jZXM8L3A+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBhY3RpdmUiPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCB0ZXh0LXRydW5jYXRlIgogICAgICAgICAgICAgICAgICAgICAgdG89IiNzb3VzbWVuIgogICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzb3VzbWVuIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+YWNjb3VudF9iYWxhbmNlX3dhbGxldDwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkFwcHJvdmlzaW9ubmVtZW50czwvcD4KICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmbGV4LWNvbHVtbiBwbC0yIG5hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3RydWN0dXJlT00nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSJzdXBwbHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5hZGRfY2lyY2xlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm91dmVsbGUgRGVtYW5kZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBhY3RpdmUiIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J2FkbWluQmFucXVlJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JCYW5xdWUnIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSJkZW1hbmRlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNjaGVkdWxlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RGVtYW5kZXMgZW4gYXR0ZW50ZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSJsaXN0ZURlbWFuZGVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cnVsZTwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxpc3RlIGRlcyBkZW1hbmRlczwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWchPT0nc3VwZXJBZG1pbicgJiYgdXNlckluZm9zLnJvbGVzWzBdLnNsdWchPT0nc3VwZXJ2aXNvciciPgogICAgICAgICAgICAgIDxyb3V0ZXItbGluayAgdG89Im5vdGlmaWNhdGlvbnMiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5ub3RpZmljYXRpb25zPC9pPgogICAgICAgICAgICAgICAgPHA+Tm90aWZpY2F0aW9uczwvcD4KICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JPTUNJJyI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICB0bz0iI3NvdXNtZW51QWRtaW4iCiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3NvdXNtZW51QWRtaW4iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj52aXNpYmlsaXR5PC9pPgogICAgICAgICAgICAgICAgPHA+QWRtaW5pc3RyYXRpb248L3A+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9InNvdXNtZW51QWRtaW4iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmxleC1jb2x1bW4gcGwtMiBuYXYiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdtYW5hZ2VyT01DSSciPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayAgdG89InZhbGlkYXRldXJzT00iPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5kb25lX2FsbDwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPlZhbGlkYXRldXJzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J21hbmFnZXJPTUNJJyI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICB0bz0iI3NvdXNtZW51U3RydWN0dXJlIgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzb3VzbWVudVN0cnVjdHVyZSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmhvbWU8L2k+CiAgICAgICAgICAgICAgICA8cD5HZXN0aW9uIGRlcyBTdHJ1Y3R1cmVzPC9wPgogICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UiIGlkPSJzb3VzbWVudVN0cnVjdHVyZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmbGV4LWNvbHVtbiBwbC0yIG5hdiI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayBjbGFzcz0ibmF2LWxpbmsiIHRvPSJzdHJ1Y3R1cmVzIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkxpc3RlIGRlcyBTdHJ1Y3R1cmVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayBjbGFzcz0ibmF2LWxpbmsiIHRvPSJhZ2VuY2VzIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkxpc3RlIGRlcyBBZ2VuY2VzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JPTUNJJyI+CiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0iY29tcHRlc0JhbnF1ZU9yYW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFjY291bnRfYmFsYW5jZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkNvbXB0ZXMgQmFucXVlIE9yYW5nZTwvcD4KICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIHRleHQtdHJ1bmNhdGUiCiAgICAgICAgICAgICAgICB0bz0iI3NvdXNtZW51IgogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzb3VzbWVudSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNldHRpbmdzPC9pPgogICAgICAgICAgICAgICAgPHA+UGFyYW3DqHRyZXM8L3A+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9InNvdXNtZW51IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZsZXgtY29sdW1uIHBsLTIgbmF2Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N1cGVyQWRtaW4nIj4KICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSIjIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+aW5mb19vdXRsaW5lPC9pPgogICAgICAgICAgICAgICAgICAgICAgPHA+QXBwcm9iYW5rPC9wPgogICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSIjIj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkFmZmljaGFnZTwvcD4KICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyI+CiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0icm9sZXMiPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5zYWZldHlfZGl2aWRlcjwvaT4KICAgICAgICAgICAgICAgICAgICAgIDxwPkdlc3Rpb24gZGVzIFLDtGxlczwvcD4KICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyI+CiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0iIyI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmxvY2s8L2k+CiAgICAgICAgICAgICAgICAgICAgICA8cD5HZXN0aW9uIGRlcyBQZXJtaXNzaW9uczwvcD4KICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGhyIGNsYXNzPSJiZy1vcmFuZ2UiLz4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0iIyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPm1lbnVfYm9vazwvaT4KICAgICAgICAgICAgICAgIDxwPkRvY3VtZW50YXRpb248L3A+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rICB0bz0iIyI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnN1cHBvcnRfYWdlbnQ8L2k+CiAgICAgICAgICAgICAgICA8cD5TZXJ2aWNlIFN1cHBvcnQ8L3A+CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJtYWluLXBhbmVsIj4KICAgICAgICA8IS0tIE5hdmJhciAtLT4KICAgICAgICA8bmF2CiAgICAgICAgICBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLXRyYW5zcGFyZW50IG5hdmJhci1hYnNvbHV0ZSBmaXhlZC10b3AgIgogICAgICAgID4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci13cmFwcGVyIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiB0bz0iamF2YXNjcmlwdDo7IgogICAgICAgICAgICAgICAgPkRlbWFuZGVzIGQnYXBwcm92aXNpb25uZW1lbnQgZW4gYXR0ZW50ZSBkJ2FwcHJvYmF0aW9uPC9hCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIGNsYXNzPSJuYXZiYXItdG9nZ2xlciIKICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9Im5hdmlnYXRpb24taW5kZXgiCiAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24gaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXItaWNvbiBpY29uLWJhciI+PC9zcGFuPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYXZiYXItdG9nZ2xlci1pY29uIGljb24tYmFyIj48L3NwYW4+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UganVzdGlmeS1jb250ZW50LWVuZCI+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgIHRvPSJqYXZhc2NyaXB0OjsiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZGFzaGJvYXJkPC9pPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkLWxnLW5vbmUgZC1tZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICBUYWJsZWF1IGRlIGJvcmQKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWchPT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayIKICAgICAgICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im5hdmJhckRyb3Bkb3duTWVudUxpbmsiCiAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPm5vdGlmaWNhdGlvbnM8L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5vdGlmaWNhdGlvbiI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZC1sZy1ub25lIGQtbWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9ucwogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCIKICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9Im5hdmJhckRyb3Bkb3duTWVudUxpbmsiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgaHJlZj0ibm90aWZpY2F0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICBOb3V2ZWxsZSBkZW1hbmRlIGVuIGF0dGVudGUgZGUgdmFsaWRhdGlvbiAhCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSJub3RpZmljYXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgIFZvdHJlIGRlbWFuZGUgYSDDqXTDqSBhcHByb3V2w6llICgxLzIpICEKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZHJvcGRvd24iPgogICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayIKICAgICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OjsiCiAgICAgICAgICAgICAgICAgICAgaWQ9Im5hdmJhckRyb3Bkb3duUHJvZmlsZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGVyc29uPC9pPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkLWxnLW5vbmUgZC1tZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICBNb24gQ29tcHRlCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IgogICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd25Qcm9maWxlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LWNlbnRlciBmb250LXdlaWdodC1ib2xkIHRleHQtb3JhbmdlIHRleHQtdXBwZXJjYXNlIj57eyB1c2VySW5mb3MubmFtZSB9fTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tZGl2aWRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9InByb2ZpbGUiPk1vbiBQcm9maWw8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIEBjbGljaz0ibG9nb3V0Ij5NZSBEw6ljb25uZWN0ZXI8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbmF2PgogICAgICAgIDwhLS0gRW5kIE5hdmJhciAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciBjYXJkLWhlYWRlci1wcmltYXJ5IGJnLW9yYW5nZSI+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIGZvbnQtd2VpZ2h0LWJvbGQiPkxpc3RlIGRlcyBkZW1hbmRlcyBzYW5zIGJvcmRlcmVhdSBlbiBhdHRlbnRlIGRlIHZhbGlkYXRpb248L2g0PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLWNhdGVnb3J5IGZvbnQtd2VpZ2h0LWJvbGQiIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J2FkbWluQmFucXVlJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JCYW5xdWUnIj4KICAgICAgICAgICAgICAgICAgICAgIEljaSBsYSBsaXN0ZSBkZXMgZGVtYW5kZXMgZCdhcHByb3Zpc2lvbm5lbWVudCBlbiBVVkUgKMOgCiAgICAgICAgICAgICAgICAgICAgICBjb25maXJtZXIgb3UgcmVqZXRlcikKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtY2F0ZWdvcnkgZm9udC13ZWlnaHQtYm9sZCIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgICAgICAgICAgSWNpIGxhIGxpc3RlIGRlcyBkZW1hbmRlcyBkJ2FwcHJvdmlzaW9ubmVtZW50IGVuIFVWRSAodm91cyBwb3V2ZXoganVzdGUgY29uc3VsdGVyKQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwcGVkIiBpZD0idGFibGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsaWVudAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9udGFudAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUklCIEV4cMOpZGl0ZXVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSSUIgQsOpbsOpZmljaWFpcmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JPTUNJJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdtYW5hZ2VyT01DSSciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKHN1cHBseVNhbnNCLCBpbmRleCkgaW4gc3VwcGxpZXNTYW5zQiIgOmtleT0ic3VwcGx5U2Fuc0IuaWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpbmRleCArIDEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdXBwbHlTYW5zQi5jcmVhdGVkX2F0IHwgZm9ybWF0RGF0ZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHN1cHBseVNhbnNCLnVzZXIuZmlyc3RuYW1lIH19IHt7IHN1cHBseVNhbnNCLnVzZXIubGFzdG5hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGx5U2Fuc0IubW9udGFudCB9fSBGIENGQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHN1cHBseVNhbnNCLnJpYl9leHAubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdXBwbHlTYW5zQi5yaWJfYmVuZWYubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjaW5mb01vZGFsU2FucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pbmZvIGJ0bi1zbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InZpZXdTdXBwbHlTYW5zKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+dmlzaWJpbGl0eTwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J2FkbWluQmFucXVlJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JCYW5xdWUnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2FwcHJvTW9kYWxTYW5zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MgYnRuLXNtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jaGVjazwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdhZG1pbkJhbnF1ZScgfHwgdXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yQmFucXVlJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNyZWpNb2RhbFNhbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIGJ0bi1zbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2xvc2U8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvckJhbnF1ZSciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKHN1cHBsaWVzU2Fuc0Jmb3JWLCBpbmRleCkgaW4gc3VwcGxpZXNTYW5zQmZvclYiIDprZXk9InN1cHBsaWVzU2Fuc0Jmb3JWLmlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaW5kZXggKyAxIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGxpZXNTYW5zQmZvclYuc3VwcGx5LmNyZWF0ZWRfYXQgfCBmb3JtYXREYXRlIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGxpZXNTYW5zQmZvclYuc3VwcGx5LnVzZXIuZmlyc3RuYW1lIH19IHt7IHN1cHBsaWVzU2Fuc0Jmb3JWLnN1cHBseS51c2VyLmxhc3RuYW1lIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LW9yYW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHN1cHBsaWVzU2Fuc0Jmb3JWLnN1cHBseS5tb250YW50IH19IEYgQ0ZBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGxpZXNTYW5zQmZvclYuc3VwcGx5LnJpYl9leHAubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdXBwbGllc1NhbnNCZm9yVi5zdXBwbHkucmliX2JlbmVmLm51bWVybyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2luZm9Nb2RhbFNhbnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taW5mbyBidG4tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJ2aWV3U3VwcGx5U2FucyhpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnZpc2liaWxpdHk8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yQmFucXVlJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNhcHByb01vZGFsU2FucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImFwcHJvU3VwcGx5U2FucyhpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNoZWNrPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvckJhbnF1ZSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjcmVqTW9kYWxTYW5zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRhbmdlciBidG4tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJyZWpTdXBwbHlTYW5zKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2xvc2U8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KCjxkaXYgY2xhc3M9ImNvbC1tZC0xMiIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXByaW1hcnkgYmctb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUgZm9udC13ZWlnaHQtYm9sZCI+TGlzdGUgZGVzIGRlbWFuZGVzIGF2ZWMgYm9yZGVyZWF1IGVuIGF0dGVudGUgZGUgdmFsaWRhdGlvbjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtY2F0ZWdvcnkgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICBJY2kgbGEgbGlzdGUgZGVzIGRlbWFuZGVzIGQnYXBwcm92aXNpb25uZW1lbnQgZW4gVVZFICjDoAogICAgICAgICAgICAgICAgICAgICAgY29uZmlybWVyIG91IHJlamV0ZXIpCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIj4KICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBwZWQiIGlkPSJ0YWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xpZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb250YW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSSUIgRXhww6lkaXRldXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJJQiBCw6luw6lmaWNpYWlyZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtw6lybyBCb3JkZXJlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBob3RvIEJvcmRlcmVhdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKHN1cHBseUF2ZWNCLCBpbmRleCkgaW4gc3VwcGxpZXNBdmVjQiIgOmtleT0ic3VwcGx5QXZlY0IuaWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpbmRleCArIDEgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdXBwbHlBdmVjQi5jcmVhdGVkX2F0IHwgZm9ybWF0RGF0ZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHN1cHBseUF2ZWNCLnVzZXIuZmlyc3RuYW1lIH19IHt7IHN1cHBseUF2ZWNCLnVzZXIubGFzdG5hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtb3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGx5QXZlY0IubW9udGFudCB9fSBGIENGQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHN1cHBseUF2ZWNCLnJpYl9leHAubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdXBwbHlBdmVjQi5yaWJfYmVuZWYubnVtZXJvIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHRleHQtdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3VwcGx5QXZlY0IubnVtZXJvX2JvcmRlcmVhdSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPSInaHR0cDovLzEyNy4wLjAuMTo4MDAwL3N0b3JhZ2UvJysgc3VwcGx5QXZlY0IucGhvdG9fYm9yZGVyZWF1IiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSInaHR0cDovLzEyNy4wLjAuMTo4MDAwL3N0b3JhZ2UvJysgc3VwcGx5QXZlY0IucGhvdG9fYm9yZGVyZWF1IiBhbHQ9InBob3RvQm9yZGVyZWF1IiBjbGFzcz0ibXktMyIgY29udGFpbiBoZWlnaHQ9IjEwMCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2luZm9Nb2RhbEF2ZWMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taW5mbyBidG4tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJ2aWV3U3VwcGx5QXZlYyhpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnZpc2liaWxpdHk8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nbWFuYWdlck9NQ0knIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI2FwcHJvTW9kYWxBdmVjIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MgYnRuLXNtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYXBwcm9TdXBwbHlBdmVjKGluZGV4KSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2hlY2s8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nbWFuYWdlck9NQ0knIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3Jlak1vZGFsQXZlYyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIgYnRuLXNtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0icmVqU3VwcGx5QXZlYyhpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsb3NlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iaW5mb01vZGFsU2FucyIgdGFiaW5kZXg9Ii0xIiByb2xlPSIiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1zaWdudXAgY2FyZC1wbGFpbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXByaW1hcnkgYmctb3JhbmdlIHRleHQtY2VudGVyIGNvbC1tZC0xMiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jbGVhcjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+SW5mb3JtYXRpb25zIHN1ciBsYSBkZW1hbmRlIGQnQXBwcm92aXNpb25uZW1lbnQ8L2g0PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICBsYWJlbD0iRGF0ZSBkZSBsYSBkZW1hbmRlIgogICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgIHYtbW9kZWw9InZpZXdTdXBwbHlTYW5zSXRlbS5jcmVhdGVkX2F0IgogICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgbGFiZWw9Ik5vbSBDbGllbnQiCiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbD0idmlld1N1cHBseVNhbnNJdGVtLmZpcnN0bmFtZSIKICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgIGxhYmVsPSJQcsOpbm9tKHMpIENsaWVudCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2aWV3U3VwcGx5U2Fuc0l0ZW0ubGFzdG5hbWUiCiAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICBsYWJlbD0iTW9udGFudCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2aWV3U3VwcGx5U2Fuc0l0ZW0ubW9udGFudCsnIEYgQ0ZBJyIKICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgIGxhYmVsPSJSSUIgZXhww6lkaXRldXIiCiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbD0idmlld1N1cHBseVNhbnNJdGVtLnJpYmV4cCIKICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgIGxhYmVsPSJSSUIgYsOpbsOpZmljaWFpcmUiCiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgdi1tb2RlbD0idmlld1N1cHBseVNhbnNJdGVtLnJpYmJlbmVmIgogICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4td2QgYnRuLWxnIgogICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBGZXJtZXIKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJhcHByb01vZGFsU2FucyIgdGFiaW5kZXg9Ii0xIiByb2xlPSIiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1zaWdudXAgY2FyZC1wbGFpbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQtaGVhZGVyIGNhcmQtaGVhZGVyLXN1Y2Nlc3MgdGV4dC1jZW50ZXIgY29sLW1kLTEyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsZWFyPC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5BcHByb3V2ZXIgbGEgZGVtYW5kZSBkJ0FwcHJvdmlzaW9ubmVtZW50PC9oND4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktNCBzdWJ0aXRsZS0xIj4KICAgICAgICAgICAgICAgICAgICBDbGllbnQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0IGZvbnQtd2VpZ2h0LWJvbGQiPnt7IGFwcHJvU3VwcGx5U2Fuc0l0ZW0uZmlyc3RuYW1lIH19IHt7IGFwcHJvU3VwcGx5U2Fuc0l0ZW0ubGFzdG5hbWUgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktNCBzdWJ0aXRsZS0xIj4KICAgICAgICAgICAgICAgICAgICBNb250YW50CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNCBmb250LXdlaWdodC1ib2xkIHRleHQtb3JhbmdlIj57eyBhcHByb1N1cHBseVNhbnNJdGVtLm1vbnRhbnQgfX0gRiBDRkE8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlPkluZm9ybWF0aW9ucyBUcmFuc2ZlcnQ8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtY2hpcC1ncm91cAogICAgICAgICAgICAgICAgICAgIGFjdGl2ZS1jbGFzcz0ib3JhbmdlIGRhcmtlbi0zIGFjY2VudC00IHdoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICAgIGNvbHVtbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5SSUIgRXhww6lkaXRldXIgOiA8di1jaGlwPnt7IGFwcHJvU3VwcGx5U2Fuc0l0ZW0ucmliZXhwIH19PC92LWNoaXA+PC9oNT4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UklCIELDqW7DqWZpY2lhaXJlIDogPHYtY2hpcD57eyBhcHByb1N1cHBseVNhbnNJdGVtLnJpYmJlbmVmIH19PC92LWNoaXA+PC9oNT4KICAgICAgICAgICAgICAgICAgPC92LWNoaXAtZ3JvdXA+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MgYnRuLXdkIGJ0bi1sZyIKICAgICAgICAgICAgICAgIEBjbGljaz0iYXBwcm92U2FucyhhcHByb1N1cHBseVNhbnNJdGVtLmlkKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIEFwcHJvdXZlcgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImluZm9Nb2RhbEF2ZWMiIHRhYmluZGV4PSItMSIgcm9sZT0iIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtc2lnbnVwIGNhcmQtcGxhaW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWhlYWRlciBjYXJkLWhlYWRlci1wcmltYXJ5IGJnLW9yYW5nZSB0ZXh0LWNlbnRlciBjb2wtbWQtMTIiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2xlYXI8L2k+CiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGl0bGUiPkluZm9ybWF0aW9ucyBzdXIgbGEgZGVtYW5kZSBkJ0FwcHJvdmlzaW9ubmVtZW50PC9oND4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjIwMCIKICAgICAgICAgICAgICAgICAgOnNyYz0iJ2h0dHA6Ly8xMjcuMC4wLjE6ODAwMC9zdG9yYWdlLycrIHZpZXdTdXBwbHlBdmVjSXRlbS5waG90b19ib3JkZXJlYXUiIGFsdD0icGhvdG9CT3JkZXJlYXUiCiAgICAgICAgICAgICAgICA+PC92LWltZz4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+TsKwIGJvcmRlcmVhdSA6IHt7IHZpZXdTdXBwbHlBdmVjSXRlbS5udW1lcm9fYm9yZGVyZWF1IH19PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LTQgc3VidGl0bGUtMSI+CiAgICAgICAgICAgICAgICAgICAgQ2xpZW50CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNCBmb250LXdlaWdodC1ib2xkIj57eyB2aWV3U3VwcGx5QXZlY0l0ZW0uZmlyc3RuYW1lIH19IHt7IHZpZXdTdXBwbHlBdmVjSXRlbS5sYXN0bmFtZSB9fTwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS00IHN1YnRpdGxlLTEiPgogICAgICAgICAgICAgICAgICAgIE1vbnRhbnQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Img0IGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1vcmFuZ2UiPnt7IHZpZXdTdXBwbHlBdmVjSXRlbS5tb250YW50IH19IEYgQ0ZBPC9kaXY+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZT5JbmZvcm1hdGlvbnMgVHJhbnNmZXJ0PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNoaXAtZ3JvdXAKICAgICAgICAgICAgICAgICAgICBhY3RpdmUtY2xhc3M9Im9yYW5nZSBkYXJrZW4tMyBhY2NlbnQtNCB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICBjb2x1bW4KICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UklCIEV4cMOpZGl0ZXVyIDogPHYtY2hpcD57eyB2aWV3U3VwcGx5QXZlY0l0ZW0ucmliZXhwIH19PC92LWNoaXA+PC9oNT4KICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UklCIELDqW7DqWZpY2lhaXJlIDogPHYtY2hpcD57eyB2aWV3U3VwcGx5QXZlY0l0ZW0ucmliYmVuZWYgfX08L3YtY2hpcD48L2g1PgogICAgICAgICAgICAgICAgICA8L3YtY2hpcC1ncm91cD4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iYXBwcm9Nb2RhbEF2ZWMiIHRhYmluZGV4PSItMSIgcm9sZT0iIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtc2lnbnVwIGNhcmQtcGxhaW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWhlYWRlciBjYXJkLWhlYWRlci1zdWNjZXNzIHRleHQtY2VudGVyIGNvbC1tZC0xMiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsb3NlIgogICAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIgogICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jbGVhcjwvaT4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0aXRsZSI+QXBwcm91dmVyIGxhIGRlbWFuZGUgZCdBcHByb3Zpc2lvbm5lbWVudDwvaDQ+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgIDx2LWNhcmQ+CiAgICAgICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyMDAiCiAgICAgICAgICAgICAgICAgIDpzcmM9IidodHRwOi8vMTI3LjAuMC4xOjgwMDAvc3RvcmFnZS8nKyBhcHByb1N1cHBseUF2ZWNJdGVtLnBob3RvX2JvcmRlcmVhdSIgYWx0PSJwaG90b0JPcmRlcmVhdSIKICAgICAgICAgICAgICAgID48L3YtaW1nPgogICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZT5OwrAgYm9yZGVyZWF1IDoge3sgYXBwcm9TdXBwbHlBdmVjSXRlbS5udW1lcm9fYm9yZGVyZWF1IH19PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LTQgc3VidGl0bGUtMSI+CiAgICAgICAgICAgICAgICAgICAgQ2xpZW50CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoNCBmb250LXdlaWdodC1ib2xkIj57eyBhcHByb1N1cHBseUF2ZWNJdGVtLmZpcnN0bmFtZSB9fSB7eyBhcHByb1N1cHBseUF2ZWNJdGVtLmxhc3RuYW1lIH19PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LTQgc3VidGl0bGUtMSI+CiAgICAgICAgICAgICAgICAgICAgTW9udGFudAogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaDQgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LW9yYW5nZSI+e3sgYXBwcm9TdXBwbHlBdmVjSXRlbS5tb250YW50IH19IEYgQ0ZBPC9kaXY+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZT5JbmZvcm1hdGlvbnMgVHJhbnNmZXJ0PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNoaXAtZ3JvdXAKICAgICAgICAgICAgICAgICAgICBhY3RpdmUtY2xhc3M9Im9yYW5nZSBkYXJrZW4tMyBhY2NlbnQtNCB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgICBjb2x1bW4KICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UklCIEV4cMOpZGl0ZXVyIDogPHYtY2hpcD57eyBhcHByb1N1cHBseUF2ZWNJdGVtLnJpYmV4cCB9fTwvdi1jaGlwPjwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlJJQiBCw6luw6lmaWNpYWlyZSA6IDx2LWNoaXA+e3sgYXBwcm9TdXBwbHlBdmVjSXRlbS5yaWJiZW5lZiB9fTwvdi1jaGlwPjwvaDU+CiAgICAgICAgICAgICAgICAgIDwvdi1jaGlwLWdyb3VwPgogICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zdWNjZXNzIGJ0bi13ZCBidG4tbGciCiAgICAgICAgICAgICAgICBAY2xpY2s9ImFwcHJvdkF2ZWMoYXBwcm9TdXBwbHlBdmVjSXRlbS5pZCkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBBcHByb3V2ZXIKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJyZWpNb2RhbEF2ZWMiIHRhYmluZGV4PSItMSIgcm9sZT0iIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtc2lnbnVwIGNhcmQtcGxhaW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWhlYWRlciBjYXJkLWhlYWRlci1kYW5nZXIgdGV4dC1jZW50ZXIgY29sLW1kLTEyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsZWFyPC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5SZWpldGVyIGxhIGRlbWFuZGUgZCdBcHByb3Zpc2lvbm5lbWVudDwvaDQ+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgIDx2LWNhcmQ+CiAgICAgICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyMDAiCiAgICAgICAgICAgICAgICAgIDpzcmM9IidodHRwOi8vMTI3LjAuMC4xOjgwMDAvc3RvcmFnZS8nKyByZWpTdXBwbHlBdmVjSXRlbS5waG90b19ib3JkZXJlYXUiIGFsdD0icGhvdG9CT3JkZXJlYXUiCiAgICAgICAgICAgICAgICA+PC92LWltZz4KICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICAgIMOKdGVzLXZvdXMgY2VydGFpbiBkZSB2b3Vsb2lyIHJlamV0ZXIgbGEgZGVtYW5kZSBkJ2FwcHJvdmlzaW9ubmVtZW50IGF2ZWMgYm9yZGVyZWF1IGRvbnQgbGVzIGTDqXRhaWxzIHN1aXZlbnQgOiA8YnI+CiAgICAgICAgICAgICAgICAgIE7CsCBib3JkZXJlYXUgOiB7eyByZWpTdXBwbHlBdmVjSXRlbS5udW1lcm9fYm9yZGVyZWF1IH19IDxicj4KICAgICAgICAgICAgICAgICAgQ2xpZW50IDoge3sgcmVqU3VwcGx5QXZlY0l0ZW0uZmlyc3RuYW1lIH19IHt7IHJlalN1cHBseUF2ZWNJdGVtLmxhc3RuYW1lIH19IDxicj4KICAgICAgICAgICAgICAgICAgTW9udGFudCA6IHt7IHJlalN1cHBseUF2ZWNJdGVtLm1vbnRhbnQgfX0gRiBDRkEKICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWRhbmdlciBidG4td2QgYnRuLWxnIgogICAgICAgICAgICAgICAgQGNsaWNrPSJyZWpBdmVjKHJlalN1cHBseUF2ZWNJdGVtLmlkKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFJlamV0ZXIKICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJyZWpNb2RhbFNhbnMiIHRhYmluZGV4PSItMSIgcm9sZT0iIj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGNhcmQtc2lnbnVwIGNhcmQtcGxhaW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWhlYWRlciBjYXJkLWhlYWRlci1kYW5nZXIgdGV4dC1jZW50ZXIgY29sLW1kLTEyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICBjbGFzcz0iY2xvc2UiCiAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsZWFyPC9pPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRpdGxlIj5SZWpldGVyIGxhIGRlbWFuZGUgZCdBcHByb3Zpc2lvbm5lbWVudDwvaDQ+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICDDinRlcy12b3VzIGNlcnRhaW4gZGUgdm91bG9pciByZWpldGVyIGxhIGRlbWFuZGUgZCdhcHByb3Zpc2lvbm5lbWVudCBkb250IGxlcyBkw6l0YWlscyBzdWl2ZW50IDogPGJyPgogICAgICAgICAgICAgICAgQ2xpZW50IDoge3sgcmVqU3VwcGx5U2Fuc0l0ZW0uZmlyc3RuYW1lIH19IHt7IHJlalN1cHBseVNhbnNJdGVtLmxhc3RuYW1lIH19IDxicj4KICAgICAgICAgICAgICAgIE1vbnRhbnQgOiB7eyByZWpTdXBwbHlTYW5zSXRlbS5tb250YW50IH19IEYgQ0ZBCiAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgdHlwZT0ic3VibWl0IgogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIGJ0bi13ZCBidG4tbGciCiAgICAgICAgICAgICAgICBAY2xpY2s9InJlalNhbnMocmVqU3VwcGx5U2Fuc0l0ZW0uaWQpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgUmVqZXRlcgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvdi1hcHA+Cg=="},null]}