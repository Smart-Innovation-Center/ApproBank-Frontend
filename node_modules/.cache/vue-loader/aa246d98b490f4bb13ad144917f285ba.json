{"remainingRequest":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\src\\views\\pages\\roles.vue?vue&type=template&id=00421788&","dependencies":[{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\src\\views\\pages\\roles.vue","mtime":1615806857299},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\SIC's Arena\\Approbank\\ApproBank-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWFwcD4KICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxkaXYgY2xhc3M9InNpZGViYXIiIGRhdGEtY29sb3I9Im9yYW5nZSIgZGF0YS1iYWNrZ3JvdW5kLWNvbG9yPSJibGFjayI+CiAgICAgIDxkaXYgY2xhc3M9ImxvZ28gdGV4dC1jZW50ZXIiPgogICAgICAgIDxhIGhyZWY9Ii4uLyI+PGgyIGNsYXNzPSJ0ZXh0LWxpZ2h0IHRleHQtdXBwZXJjYXNlIj5BcHByb2Jhbms8L2gyPjwvYT4KICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1vcmFuZ2UgdGV4dC11cHBlcmNhc2UiPnt7IHVzZXJJbmZvcy5yb2xlc1swXS5uYW1lIH19PC9zcGFuPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci13cmFwcGVyIj4KICAgICAgICA8dWwgY2xhc3M9Im5hdiB0ZXh0LWxlZnQiPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iZGFzaGJvYXJkIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmRhc2hib2FyZDwvaT4KICAgICAgICAgICAgICA8cD5UYWJsZWF1IGRlIEJvcmQ8L3A+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJwcm9maWxlIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnBlcnNvbjwvaT4KICAgICAgICAgICAgICA8cD5Qcm9maWw8L3A+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdHJ1Y3R1cmVPTSciPgogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9Im1lc0FnZW5jZXMiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+c3RvcmVfbWFsbF9kaXJlY3Rvcnk8L2k+CiAgICAgICAgICAgICAgPHA+TWVzIEFnZW5jZXM8L3A+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGYgICAgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCB0ZXh0LXRydW5jYXRlIgogICAgICAgICAgICAgICAgICAgIGhyZWY9IiNzb3VzbWVuIgogICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3NvdXNtZW4iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFjY291bnRfYmFsYW5jZV93YWxsZXQ8L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+QXBwcm92aXNpb25uZW1lbnRzPC9wPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmxleC1jb2x1bW4gcGwtMiBuYXYiPgogICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdHJ1Y3R1cmVPTSciPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InN1cHBseSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5hZGRfY2lyY2xlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vdXZlbGxlIERlbWFuZGU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nYWRtaW5CYW5xdWUnIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvckJhbnF1ZScgfHwgdXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSSciPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImRlbWFuZGVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNjaGVkdWxlPC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkRlbWFuZGVzIGVuIGF0dGVudGU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJsaXN0ZURlbWFuZGVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnJ1bGU8L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGlzdGUgZGVzIGRlbWFuZGVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnIT09J3N1cGVyQWRtaW4nICYmIHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnIT09J3N1cGVydmlzb3InIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJub3RpZmljYXRpb25zIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPm5vdGlmaWNhdGlvbnM8L2k+CiAgICAgICAgICAgICAgPHA+Tm90aWZpY2F0aW9uczwvcD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N1cGVyQWRtaW4nIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3ZhbGlkYXRvck9NQ0knIHx8IHVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J21hbmFnZXJPTUNJJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdhZG1pbkJhbnF1ZSciPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayBjb2xsYXBzZWQgdGV4dC10cnVuY2F0ZSIKICAgICAgICAgICAgICBocmVmPSIjc291c21lbnVBZG1pbiIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzb3VzbWVudUFkbWluIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj52aXNpYmlsaXR5PC9pPgogICAgICAgICAgICAgIDxwPkFkbWluaXN0cmF0aW9uPC9wPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbnVBZG1pbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmxleC1jb2x1bW4gcGwtMiBuYXYiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBhY3RpdmUiIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J2FkbWluQmFucXVlJyI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0idmFsaWRhdGV1cnNCYW5xdWUiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZG9uZV9hbGw8L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+VmFsaWRhdGV1cnM8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdtYW5hZ2VyT01DSSciPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InZhbGlkYXRldXJzT00iPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZG9uZV9hbGw8L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+VmFsaWRhdGV1cnM8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSd2YWxpZGF0b3JPTUNJJyB8fCB1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdtYW5hZ2VyT01DSSciPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayBjb2xsYXBzZWQgdGV4dC10cnVuY2F0ZSIKICAgICAgICAgICAgICBocmVmPSIjc291c21lbnVTdHJ1Y3R1cmUiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc291c21lbnVTdHJ1Y3R1cmUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmhvbWU8L2k+CiAgICAgICAgICAgICAgPHA+R2VzdGlvbiBkZXMgU3RydWN0dXJlczwvcD4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9InNvdXNtZW51U3RydWN0dXJlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmbGV4LWNvbHVtbiBwbC0yIG5hdiI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIGNsYXNzPSJuYXYtbGluayIgdG89InN0cnVjdHVyZXMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICA8cD5MaXN0ZSBkZXMgU3RydWN0dXJlczwvcD4KICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIGNsYXNzPSJuYXYtbGluayIgdG89ImFnZW5jZXMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICA8cD5MaXN0ZSBkZXMgQWdlbmNlczwvcD4KICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0ndmFsaWRhdG9yT01DSScgfHwgdXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nbWFuYWdlck9NQ0knIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJjb21wdGVzQmFucXVlT3JhbmdlIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmFjY291bnRfYmFsYW5jZTwvaT4KICAgICAgICAgICAgICAgICAgICA8cD5Db21wdGVzIEJhbnF1ZSBPcmFuZ2U8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBhY3RpdmUiPgogICAgICAgICAgICA8YQogICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayBjb2xsYXBzZWQgdGV4dC10cnVuY2F0ZSIKICAgICAgICAgICAgICBocmVmPSIjc291c21lbnUiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc291c21lbnUiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNldHRpbmdzPC9pPgogICAgICAgICAgICAgIDxwPlBhcmFtw6h0cmVzPC9wPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ic291c21lbnUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZsZXgtY29sdW1uIHBsLTIgbmF2Ij4KICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5pbmZvX291dGxpbmU8L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+QXBwcm9iYW5rPC9wPgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGFsZXR0ZTwvaT4KICAgICAgICAgICAgICAgICAgICA8cD5BZmZpY2hhZ2U8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIiB2LWlmPSJ1c2VySW5mb3Mucm9sZXNbMF0uc2x1Zz09PSdzdXBlckFkbWluJyI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0idXRpbGlzYXRldXJzIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmdyb3VwczwvaT4KICAgICAgICAgICAgICAgICAgICA8cD5HZXN0aW9uIGRlcyBVdGlsaXNhdGV1cnM8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGFjdGl2ZSIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWc9PT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InJvbGVzIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnNhZmV0eV9kaXZpZGVyPC9pPgogICAgICAgICAgICAgICAgICAgIDxwPkdlc3Rpb24gZGVzIFLDtGxlczwvcD4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N1cGVyQWRtaW4nIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmxvY2s8L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+R2VzdGlvbiBkZXMgUGVybWlzc2lvbnM8L3A+CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGhyIGNsYXNzPSJiZy1vcmFuZ2UiLz4KICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+bWVudV9ib29rPC9pPgogICAgICAgICAgICAgIDxwPkRvY3VtZW50YXRpb248L3A+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnN1cHBvcnRfYWdlbnQ8L2k+CiAgICAgICAgICAgICAgPHA+U2VydmljZSBTdXBwb3J0PC9wPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtYWluLXBhbmVsIj4KICAgICAgPCEtLSBOYXZiYXIgLS0+CiAgICAgIDxuYXYKICAgICAgICBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLXRyYW5zcGFyZW50IG5hdmJhci1hYnNvbHV0ZSBmaXhlZC10b3AgIgogICAgICA+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci13cmFwcGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iamF2YXNjcmlwdDo7Ij5HZXN0aW9uIGRlcyBSw7RsZXM8L2E+CiAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIiCiAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICBhcmlhLWNvbnRyb2xzPSJuYXZpZ2F0aW9uLWluZGV4IgogICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgbmF2aWdhdGlvbjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24gaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24gaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24gaWNvbi1iYXIiPjwvc3Bhbj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIGp1c3RpZnktY29udGVudC1lbmQiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYiPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJkYXNoYm9hcmQiPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmRhc2hib2FyZDwvaT4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImQtbGctbm9uZSBkLW1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICBUYWJsZWF1IGRlIGJvcmQKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biIgdi1pZj0idXNlckluZm9zLnJvbGVzWzBdLnNsdWchPT0nc3VwZXJBZG1pbiciPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICBocmVmPSIiCiAgICAgICAgICAgICAgICAgIGlkPSJuYXZiYXJEcm9wZG93bk1lbnVMaW5rIgogICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPm5vdGlmaWNhdGlvbnM8L2k+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJub3RpZmljYXRpb24iPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkLWxnLW5vbmUgZC1tZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9ucwogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQiCiAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd25NZW51TGluayIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9Im5vdGlmaWNhdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIE5vdXZlbGxlIGRlbWFuZGUgZW4gYXR0ZW50ZSBkZSB2YWxpZGF0aW9uICEKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgaHJlZj0ibm90aWZpY2F0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgVm90cmUgZGVtYW5kZSBhIMOpdMOpIGFwcHJvdXbDqWUgKDEvMikgIQogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZHJvcGRvd24iPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICBocmVmPSJqYXZhc2NyaXB0OjsiCiAgICAgICAgICAgICAgICAgIGlkPSJuYXZiYXJEcm9wZG93blByb2ZpbGUiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cGVyc29uPC9pPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZC1sZy1ub25lIGQtbWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgIE1vbiBDb21wdGUKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IgogICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9Im5hdmJhckRyb3Bkb3duUHJvZmlsZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1jZW50ZXIgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LW9yYW5nZSB0ZXh0LXVwcGVyY2FzZSI+e3sgdXNlckluZm9zLm5hbWUgfX08L2g0PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1kaXZpZGVyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9InByb2ZpbGUiPk1vbiBQcm9maWw8L2E+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBAY2xpY2s9ImxvZ291dCI+TWUgRMOpY29ubmVjdGVyPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L25hdj4KICAgICAgPCEtLSBFbmQgTmF2YmFyIC0tPgogICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiIHYtaWY9InVzZXJJbmZvcy5yb2xlc1swXS5zbHVnPT09J3N1cGVyQWRtaW4nIj4KICAgICAgICAgICAgICA8di1jYXJkPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgICA8di1kYXRhLXRhYmxlCiAgICAgICAgICAgICAgICAgIDpoZWFkZXJzPSJoZWFkZXJzIgogICAgICAgICAgICAgICAgICA6aXRlbXM9InJvbGVzIgogICAgICAgICAgICAgICAgICA6c29ydC1ieT0iWydpc1N5c3RlbScsICduYW1lJ10iCiAgICAgICAgICAgICAgICAgIDpzb3J0LWFzYz0iWyd0cnVlJ10iCiAgICAgICAgICAgICAgICAgIGhpZGUtc2VsZWN0CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJlbGV2YXRpb24tMSIKICAgICAgICAgICAgICAgICAgOnNlYXJjaD0ic2VhcmNoIgogICAgICAgICAgICAgICAgICBsb2FkaW5nCiAgICAgICAgICAgICAgICAgIGxvYWRpbmctdGV4dD0iQ2hhcmdlbWVudC4uLiBWZXVpbGxleiBwYXRpZW50ZXIiCiAgICAgICAgICAgICAgICAgIG5vLXJlc3VsdHMtdGV4dD0nQXVjdW5lIGRvbm7DqWUgw6AgYWZmaWNoZXInCiAgICAgICAgICAgICAgICAgIGZvb3Rlci1wcm9wcy5pdGVtcy1wZXItcGFnZS10ZXh0PSdEb25uw6llcyAnCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRvcD4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgICAgICAgICAgICBmbGF0CiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8di10b29sYmFyLXRpdGxlPkxpc3RlIGRlcyByb2xlcyAoe3sgcm9sZXMubGVuZ3RoIH19KTwvdi10b29sYmFyLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXgtMTUiCiAgICAgICAgICAgICAgICAgICAgICAgIGluc2V0CiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsCiAgICAgICAgICAgICAgICAgICAgICA+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlYXJjaCIKICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kLWljb249Im1kaS1tYWduaWZ5IgogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iUmVjaGVyY2hlIgogICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUtbGluZQogICAgICAgICAgICAgICAgICAgICAgICBoaWRlLWRldGFpbHMKICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8di1kaWFsb2cKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGlhbG9nIgogICAgICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9IjUwMHB4IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWItMiBidG4tb3JhbmdlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICBBam91dGVyIAogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGVhZGxpbmUiPnt7IGZvcm1UaXRsZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iTm9tIGR1IHLDtGxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Im5vbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249Im1kaS1hY2NvdW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZWRpdGVkSXRlbS5uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlNsdWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InNsdWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0ibWRpLWFjY291bnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVkaXRlZEl0ZW0uc2x1ZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWZvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1saW5rIGJ0bi1kZWZhdWx0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJjbG9zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbm51bGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW9yYW5nZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2F2ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnJlZ2lzdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ0RlbGV0ZSIgbWF4LXdpZHRoPSI1MDBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJoZWFkbGluZSI+w4p0ZXMtdm91cyBzw7tyIGRlIHN1cHByaW1lciBsZSByw7RsZSB7eyBlZGl0ZWRJdGVtLm5hbWUgfX0gPzwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJibHVlIGRhcmtlbi0xIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi1saW5rIiB0ZXh0IEBjbGljaz0iY2xvc2VEZWxldGUiPkFubnVsZXI8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiB0ZXh0IEBjbGljaz0iZGVsZXRlSXRlbUNvbmZpcm0oZWRpdGVkSXRlbS5pZCkiPlN1cHByaW1lcjwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8L3YtdG9vbGJhcj4KCiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDppdGVtLmFjdGlvbnM9InsgaXRlbSB9Ij4KICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgIHYtaWY9Iml0ZW0uaXNTeXN0ZW09PWZhbHNlIgogICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1yLTIiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJlZGl0SXRlbShpdGVtKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIG1kaS1wZW5jaWwKICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICB2LWlmPSJpdGVtLmlzU3lzdGVtPT1mYWxzZSIKICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZGVsZXRlSXRlbShpdGVtKSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIG1kaS1kZWxldGUKICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDppdGVtLmlzU3lzdGVtPSJ7IGl0ZW0gfSI+CiAgICAgICAgICAgICAgICAgIHt7IGl0ZW0uaXNTeXN0ZW0gPyAiUsO0bGUgU3lzdMOobWUiIDogIlLDtGxlIFBlcnNvbm5hbGlzw6kiIH19CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpuby1kYXRhPgogICAgICAgICAgICAgICAgICAgIEF1Y3VuZSBkb25uw6llIMOgIGFmZmljaGVyCiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3YtYXBwPgo="},null]}